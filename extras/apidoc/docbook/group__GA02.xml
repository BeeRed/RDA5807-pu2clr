<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__GA02" xml:lang="en-US">
<title>Basic Functions</title>
<indexterm><primary>Basic Functions</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_group__GA02_1ga1db36d126d26a553668c1b70de9b3823">RDA5807::setDelayAfterCrystalOn</link> (uint8_t ms_value)</para>

<para>Set the Delay After Crystal On (default 500ms) </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1gadf634cb6733022e30d8f1a74a5946e78">RDA5807::setI2CBusAddrs</link> (int directAccess, int fullAccess)</para>

<para>Sets alternatives I2C bus address. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1ga677eff1084b294696a32e3ca4dfe593b">RDA5807::setGpio</link> (uint8_t gpioPin, uint8_t gpioSetup=0, int mcuPin=-1)</para>

<para>Sets the Device GPIO pins. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1gab9e3a5584a6238f719e9c9e49435f5ce">RDA5807::getStatusRegisters</link> ()</para>

<para>Gets all current device status and RDS information registers (From 0x0A to 0x0F) </para>
</listitem>
            <listitem><para><link linkend="_group__GA01_1unionword16__to__bytes">word16_to_bytes</link> <link linkend="_group__GA02_1ga69981ef141e22ab00e4bde3f18f84964">RDA5807::getDirectRegister</link> (uint8_t reg)</para>

<para>Gets the register content via direct access. </para>
</listitem>
            <listitem><para>void * <link linkend="_group__GA02_1ga1f4bc3d6f9d94171b2965dbb4e812f4f">RDA5807::getStatus</link> (uint8_t reg)</para>

<para>Gets the register content of a given status register (from 0x0A to 0x0F) </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1ga3b581b82ab8c631cfec537a47008ddf3">RDA5807::setRegister</link> (uint8_t reg, uint16_t value)</para>

<para>Sets a given value to a specific device register. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1ga3fe1feed45d3290beba0efef491128e6">RDA5807::waitAndFinishTune</link> ()</para>

<para>Waits for Seek or Tune finish. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1ga3f6dace4c93f82ec66da5641e3e3fdaa">RDA5807::softReset</link> ()</para>

<para>Resets the device. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1ga30d2b0c4662922df53bcef118663329c">RDA5807::powerUp</link> ()</para>

<para>Powers the receiver on. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1gab97c1c8ad3ab0cd5d2852f712caee0a1">RDA5807::setNewDemodulateMethod</link> (bool value)</para>

<para>Sets new demodulate method. It can improve the receiver sensitivity about 1dB. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1ga214f631aef72ece69db73c99879c7c46">RDA5807::powerDown</link> ()</para>

<para>Power the receiver off. </para>
</listitem>
            <listitem><para>void <link linkend="_group__GA02_1gac79c1fec6c416c9993ff19362fe312cb">RDA5807::setup</link> (uint8_t clock_type=<link linkend="_RDA5807_8h_1aaaa8a7748321c8739d938babeb67d8e9">CLOCK_32K</link>, uint8_t oscillator_type=<link linkend="_RDA5807_8h_1ad0763fd256db4ec1ecc62f84bbff56e2">OSCILLATOR_TYPE_CRYSTAL</link>)</para>

<para>Starts the device. </para>
</listitem>
            <listitem><para>uint16_t <link linkend="_group__GA02_1gad1d589d43adc89a93c5e07b2d4cb6a4c">RDA5807::getDeviceId</link> ()</para>

<para>Gets the Device identification. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<section xml:id="_group__GA02_1GA02">
<title>Basic Functions</title>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__GA02_1ga1db36d126d26a553668c1b70de9b3823"/><section>
    <title>setDelayAfterCrystalOn()</title>
<indexterm><primary>setDelayAfterCrystalOn</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>setDelayAfterCrystalOn</secondary></indexterm>
<para><computeroutput>void RDA5807::setDelayAfterCrystalOn (uint8_t ms_value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set the Delay After Crystal On (default 500ms) </para>
</para>

<para>Minimum time required for the oscillator to become stable 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ms_value</entry><entry>
<para>Value in milliseconds </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__GA02_1gadf634cb6733022e30d8f1a74a5946e78"/><section>
    <title>setI2CBusAddrs()</title>
<indexterm><primary>setI2CBusAddrs</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>setI2CBusAddrs</secondary></indexterm>
<para><computeroutput>void RDA5807::setI2CBusAddrs (int directAccess, int fullAccess)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Sets alternatives I2C bus address. </para>
</para>

<para>You do not need use this function on RDA5807M 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>directAccess</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>fullAccess</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
References <link linkend="_l00594">RDA5807::deviceAddressDirectAccess</link>, and <link linkend="_l00595">RDA5807::deviceAddressFullAccess</link>.</para>
</section>
<anchor xml:id="_group__GA02_1ga677eff1084b294696a32e3ca4dfe593b"/><section>
    <title>setGpio()</title>
<indexterm><primary>setGpio</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>setGpio</secondary></indexterm>
<para><computeroutput>void RDA5807::setGpio (uint8_t gpioPin, uint8_t gpioSetup = <computeroutput>0</computeroutput>
, int mcuPin = <computeroutput>-1</computeroutput>
)</computeroutput></para><para>

<para>Sets the Device GPIO pins. </para>
</para>

<para>This method is useful to add control to the system via GPIO RDA devive pins.</para>

<para>For example: You can use these pins to control RDS and SEEK via interrupt.</para>

<para>GPIOs are General Purpose I/O pin. <?linebreak?></para>

<para>GPIO setup</para>

<para>When GPIO1 (#1), gpioSetup can be: 00 = High impedance; 01 = Reserved; 10 = Low; 11 = High</para>

<para>When GPIO2 (#2), gpioSetup can be: 00 = High impedance; 01 = Interrupt (INT) 10 = Low; 11 = High</para>

<para>When GPIO3 (#3), gpioSetup can be: 00 = High impedance; 01 = Mono/Stereo indicator (ST) = Low; 11 = High</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>gpioPin</entry><entry>
<para>gpio number (1, 2 or 3) </para>
</entry>
                            </row>
                            <row>
<entry>gpioSetup</entry><entry>
<para>See description above </para>
</entry>
                            </row>
                            <row>
<entry>mcuPip</entry><entry>
<para>MCU (Arduino) pin connected to the gpio </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__GA02_1gab9e3a5584a6238f719e9c9e49435f5ce"/><section>
    <title>getStatusRegisters()</title>
<indexterm><primary>getStatusRegisters</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>getStatusRegisters</secondary></indexterm>
<para><computeroutput>void RDA5807::getStatusRegisters ( )</computeroutput></para><para>

<para>Gets all current device status and RDS information registers (From 0x0A to 0x0F) </para>
</para>

<para><formalpara><title>See also</title>

<para>RDA5807M - SINGLE-CHIP BROADCAST FMRADIO TUNER; pages 5, 9, 12 and 13. </para>

<para><link linkend="_group__GA01_1unionrda__reg0a">rda_reg0a</link>, <link linkend="_group__GA01_1unionrda__reg0b">rda_reg0b</link>, <link linkend="_group__GA01_1unionrda__reg0c">rda_reg0c</link>, <link linkend="_group__GA01_1unionrda__reg0d">rda_reg0d</link>, <link linkend="_group__GA01_1unionrda__reg0e">rda_reg0e</link>, <link linkend="_group__GA01_1unionrda__reg0f">rda_reg0f</link> </para>

<para><link linkend="_group__GA01_1ae51bb0aaf958ee320da80866bb20ffb5">shadowStatusRegisters</link>; </para>
</formalpara>
</para>
<para>
Referenced by <link linkend="_l00629">RDA5807::getRdsFlagAB()</link>, <link linkend="_l00643">RDA5807::getRdsGroupType()</link>, <link linkend="_l00672">RDA5807::getRdsProgramType()</link>, <link linkend="_l00762">RDA5807::getRdsText()</link>, <link linkend="_l00788">RDA5807::getRdsText0A()</link>, <link linkend="_l00817">RDA5807::getRdsText2A()</link>, <link linkend="_l00846">RDA5807::getRdsText2B()</link>, <link linkend="_l00872">RDA5807::getRdsTime()</link>, and <link linkend="_l00658">RDA5807::getRdsVersionCode()</link>.</para>
</section>
<anchor xml:id="_group__GA02_1ga69981ef141e22ab00e4bde3f18f84964"/><section>
    <title>getDirectRegister()</title>
<indexterm><primary>getDirectRegister</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>getDirectRegister</secondary></indexterm>
<para><computeroutput><link linkend="_group__GA01_1unionword16__to__bytes">word16_to_bytes</link> RDA5807::getDirectRegister (uint8_t reg)</computeroutput></para><para>

<para>Gets the register content via direct access. </para>
</para>

<para>this method is useful to deal with a specific register. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>uint8_t</entry><entry>
<para>register number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_group__GA01_1unionword16__to__bytes">word16_to_bytes</link> register content </para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_group__GA01_1unionword16__to__bytes">word16_to_bytes</link> datatype in <link linkend="_RDA5807_8h">RDA5807.h</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__GA02_1ga1f4bc3d6f9d94171b2965dbb4e812f4f"/><section>
    <title>getStatus()</title>
<indexterm><primary>getStatus</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>getStatus</secondary></indexterm>
<para><computeroutput>void * RDA5807::getStatus (uint8_t reg)</computeroutput></para><para>

<para>Gets the register content of a given status register (from 0x0A to 0x0F) </para>
</para>

<para>Useful when you need just a specific status register content.</para>

<para>This methos update the first element of the shadowStatusRegisters linked to the register <formalpara><title>Returns</title>

<para>rdax_reg0a the reference to current value of the 0x0A register. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__GA02_1ga3b581b82ab8c631cfec537a47008ddf3"/><section>
    <title>setRegister()</title>
<indexterm><primary>setRegister</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>setRegister</secondary></indexterm>
<para><computeroutput>void RDA5807::setRegister (uint8_t reg, uint16_t value)</computeroutput></para><para>

<para>Sets a given value to a specific device register. </para>
</para>

<para><formalpara><title>See also</title>

<para>RDA5807M - SINGLE-CHIP BROADCAST FMRADIO TUNER; pages 5, 9, 10 and 11. </para>

<para><link linkend="_group__GA01_1unionrda__reg02">rda_reg02</link>, <link linkend="_group__GA01_1unionrda__reg03">rda_reg03</link>, <link linkend="_group__GA01_1unionrda__reg04">rda_reg04</link>, <link linkend="_group__GA01_1unionrda__reg05">rda_reg05</link>, <link linkend="_group__GA01_1unionrda__reg06">rda_reg06</link>, <link linkend="_group__GA01_1unionrda__reg07">rda_reg07</link></para>
</formalpara>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>reg</entry><entry>
<para>register number (valid values is between 0x02 and 0x07) <?linebreak?> </para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>the unsigned 16 bits word value (see rda_rec0x data types) <?linebreak?> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__GA02_1ga3fe1feed45d3290beba0efef491128e6"/><section>
    <title>waitAndFinishTune()</title>
<indexterm><primary>waitAndFinishTune</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>waitAndFinishTune</secondary></indexterm>
<para><computeroutput>void RDA5807::waitAndFinishTune ( )</computeroutput></para><para>

<para>Waits for Seek or Tune finish. </para>
</para>
<para>
Referenced by <link linkend="_l00450">RDA5807::seek()</link>, and <link linkend="_l00303">RDA5807::setChannel()</link>.</para>
</section>
<anchor xml:id="_group__GA02_1ga3f6dace4c93f82ec66da5641e3e3fdaa"/><section>
    <title>softReset()</title>
<indexterm><primary>softReset</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>softReset</secondary></indexterm>
<para><computeroutput>void RDA5807::softReset ( )</computeroutput></para><para>

<para>Resets the device. </para>
</para>

<para>The RDA5807M is RESET itself When VIO is Power up.</para>

<para>Also, it support soft reset by triggering the 0x02 register (<link linkend="_group__GA01_1unionrda__reg02">rda_reg02</link>) bit 1 from 0 to 1. </para>
</section>
<anchor xml:id="_group__GA02_1ga30d2b0c4662922df53bcef118663329c"/><section>
    <title>powerUp()</title>
<indexterm><primary>powerUp</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>powerUp</secondary></indexterm>
<para><computeroutput>void RDA5807::powerUp ( )</computeroutput></para><para>

<para>Powers the receiver on. </para>
</para>
<para>
Referenced by <link linkend="_l00237">RDA5807::setup()</link>.</para>
</section>
<anchor xml:id="_group__GA02_1gab97c1c8ad3ab0cd5d2852f712caee0a1"/><section>
    <title>setNewDemodulateMethod()</title>
<indexterm><primary>setNewDemodulateMethod</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>setNewDemodulateMethod</secondary></indexterm>
<para><computeroutput>void RDA5807::setNewDemodulateMethod (bool value)</computeroutput></para><para>

<para>Sets new demodulate method. It can improve the receiver sensitivity about 1dB. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>true or false </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__GA02_1ga214f631aef72ece69db73c99879c7c46"/><section>
    <title>powerDown()</title>
<indexterm><primary>powerDown</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>powerDown</secondary></indexterm>
<para><computeroutput>void RDA5807::powerDown ( )</computeroutput></para><para>

<para>Power the receiver off. </para>
</para>
</section>
<anchor xml:id="_group__GA02_1gac79c1fec6c416c9993ff19362fe312cb"/><section>
    <title>setup()</title>
<indexterm><primary>setup</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>setup</secondary></indexterm>
<para><computeroutput>void RDA5807::setup (uint8_t clock_type = <computeroutput><link linkend="_RDA5807_8h_1aaaa8a7748321c8739d938babeb67d8e9">CLOCK_32K</link></computeroutput>
, uint8_t oscillator_type = <computeroutput><link linkend="_RDA5807_8h_1ad0763fd256db4ec1ecc62f84bbff56e2">OSCILLATOR_TYPE_CRYSTAL</link></computeroutput>
)</computeroutput></para><para>

<para>Starts the device. </para>
</para>

<para>You can select the colck type and the frequency</para>

<para>oscillator type: OSCILLATOR_TYPE_CRYSTAL = passive crystal; OSCILLATOR_TYPE_REFCLK = active crystal or signal generator</para>

<para>Clock type: CLOCK_32K, CLOCK_12M, CLOCK_13M, CLOCK_19_2M, CLOCK_24M, CLOCK_26M and CLOCK_38_4M <?linebreak?> 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>clock_type</entry><entry>
<para>Clock used. </para>
</entry>
                            </row>
                            <row>
<entry>oscillator_type</entry><entry>
<para>optional. Sets the Oscillator type used (default: passive Crystal). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
References <link linkend="_l00179">RDA5807::powerUp()</link>.</para>
</section>
<anchor xml:id="_group__GA02_1gad1d589d43adc89a93c5e07b2d4cb6a4c"/><section>
    <title>getDeviceId()</title>
<indexterm><primary>getDeviceId</primary><secondary>Basic Functions</secondary></indexterm>
<indexterm><primary>Basic Functions</primary><secondary>getDeviceId</secondary></indexterm>
<para><computeroutput>uint16_t RDA5807::getDeviceId ( )</computeroutput></para><para>

<para>Gets the Device identification. </para>
</para>

<para><formalpara><title>Returns</title>

<para>device number Id </para>
</formalpara>
</para>
</section>
</section>
</section>
